import React, { useEffect, useState } from 'react';
import api from '../services/api';
import { Box, Typography, CircularProgress, List, ListItemButton, ListItemText, Paper } from '@mui/material';
import { useNavigate } from 'react-router-dom';

interface Course {
  id: number;
  name: string;
  // Add other fields as needed
}

const CoursesPage: React.FC = () => {
  const [courses, setCourses] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const response = await api.get('/result_system/courses/');
        setCourses(response.data.results);
      } catch (err) {
        console.error('Failed to load courses:', err);
        setError('Failed to load courses.');
      } finally {
        setLoading(false);
      }
    };
    fetchCourses();
  }, []);

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 8 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ textAlign: 'center', mt: 8 }}>
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ maxWidth: 600, mx: 'auto', mt: 4 }}>
      <Typography variant="h4" gutterBottom>
        Courses
      </Typography>
      <Paper>
        <List>
          {courses.map((course) => (
            <ListItemButton
              key={course.id}
              onClick={() => navigate(`/result_system/courses/${course.id}`)}
            >
              <ListItemText primary={course.name} />
            </ListItemButton>
          ))}
        </List>
      </Paper>
    </Box>
  );
};

export default CoursesPage;

import React from 'react';
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';
import { Link as RouterLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/useAuth';

const NavBar: React.FC = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    localStorage.removeItem('access');
    localStorage.removeItem('refresh');
    logout();
    navigate('/login');
  };

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            Result System
          </Typography>
          <Button color="inherit" component={RouterLink} to="/">
            Home
          </Button>
          <Button color="inherit" component={RouterLink} to="/result_system/courses">
            Courses
          </Button>
          <Button color="inherit" component={RouterLink} to="/result_system/submitted_results">
            Submitted Results
          </Button>
          {user ? (
            <Button color="inherit" onClick={handleLogout}>
              Logout
            </Button>
          ) : (
            <Button color="inherit" component={RouterLink} to="/login">
              Login
            </Button>
          )}
        </Toolbar>
      </AppBar>
    </Box>
  );
};

export default NavBar;

contexts:

import { createContext } from 'react';

export interface AuthContextType {
  user: unknown;
  login: (userData: unknown) => void;
  logout: () => void;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

import { useState, type ReactNode } from 'react';
import { AuthContext } from './AuthContext';

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<unknown>(null);

  const login = (userData: unknown) => setUser(userData);
  const logout = () => setUser(null);

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

import { useContext } from 'react';
import { AuthContext } from './AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error('useAuth must be used within AuthProvider');
  return context;
};

pages 

import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import api from "../services/api";
import {
  Box,
  Typography,
  CircularProgress,
  Button,
  List,
  ListItemButton,
  ListItemText,
  Paper,
} from "@mui/material";

interface Result {
  id: number;
  // Add other fields as needed
}

const CourseResultsPage: React.FC = () => {
  const { courseId } = useParams<{ courseId: string }>();
  const navigate = useNavigate();
  const [results, setResults] = useState<Result[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [creating, setCreating] = useState(false);

  const fetchResults = async () => {
    setLoading(true);
    try {
      const response = await api.get(
        `/result_system/courses/${courseId}/results/`
      );
      setResults(response.data.results);
      setError("");
    } catch (err) {
      console.error("Failed to load results:", err);
      setError("Failed to load results.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchResults();
    // eslint-disable-next-line
  }, [courseId]);

  const handleCreateResult = async () => {
    setCreating(true);
    setError("");
    try {
      await api.post(`/result_system/courses/${courseId}/results/`, {});
      await fetchResults(); // Refresh the results list after creation
    } catch {
      setError("Failed to create result.");
    } finally {
      setCreating(false);
    }
  };

  if (loading) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", mt: 8 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ textAlign: "center", mt: 8 }}>
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ maxWidth: 600, mx: "auto", mt: 4 }}>
      <Typography variant="h5" gutterBottom>
        Results for Course #{courseId}
      </Typography>
      {results.length === 0 ? (
        <Box sx={{ textAlign: "center", mt: 4 }}>
          <Typography>No results found for this course.</Typography>
          <Button
            variant="contained"
            color="primary"
            sx={{ mt: 2 }}
            onClick={handleCreateResult}
            disabled={creating}
          >
            {creating ? "Creating..." : "Create Result"}
          </Button>
        </Box>
      ) : (
        <Paper>
          <List>
            {results.map((result) => (
              <ListItemButton
                key={result.id}
                onClick={() =>
                  navigate(
                    `/result_system/courses/${courseId}/results/${result.id}`
                  )
                }
              >
                <ListItemText primary={`Result ID: ${result.id}`} />
              </ListItemButton>
            ))}
          </List>
        </Paper>
      )}
    </Box>
  );
};

export default CourseResultsPage;

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/useAuth';
import api from '../services/api';
import { TextField, Button, Box, Typography } from '@mui/material';

const LoginPage: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    try {
      const response = await api.post('/auth/jwt/create/', { username, password });
      // Save tokens (for now, localStorage is OK)
      localStorage.setItem('access', response.data.access);
      localStorage.setItem('refresh', response.data.refresh);
      login({ username }); // You can expand this to include more user info
      navigate('/');
    } catch {
      setError('Invalid credentials');
    }
  };

  return (
    <Box sx={{ maxWidth: 400, mx: 'auto', mt: 8 }}>
      <Typography variant="h5" mb={2}>Login</Typography>
      <form onSubmit={handleSubmit}>
        <TextField
          label="Username"
          fullWidth
          margin="normal"
          value={username}
          onChange={e => setUsername(e.target.value)}
        />
        <TextField
          label="Password"
          type="password"
          fullWidth
          margin="normal"
          value={password}
          onChange={e => setPassword(e.target.value)}
        />
        {error && <Typography color="error">{error}</Typography>}
        <Button type="submit" variant="contained" fullWidth sx={{ mt: 2 }}>
          Login
        </Button>
      </form>
    </Box>
  );
};

export default LoginPage;

import React from 'react';
import { Box, Typography } from '@mui/material';

const NotFoundPage: React.FC = () => (
  <Box sx={{ textAlign: 'center', mt: 8 }}>
    <Typography variant="h2" color="error" gutterBottom>
      404
    </Typography>
    <Typography variant="h5" gutterBottom>
      Page Not Found
    </Typography>
    <Typography variant="body1">
      The page you are looking for does not exist.
    </Typography>
  </Box>
);

export default NotFoundPage;

import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import api from "../services/api";
import {
  Box,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  TextField,
  Button,
  CircularProgress,
} from "@mui/material";

interface Assessment {
  id: number;
  student: number;
  ca_slot1: number | null;
  ca_slot2: number | null;
  ca_slot3: number | null;
  ca_slot4: number | null;
  exam_mark: number | null;
  // Add more fields if needed
}

const ResultDetailPage: React.FC = () => {
  const { courseId, resultId } = useParams<{
    courseId: string;
    resultId: string;
  }>();
  const [assessments, setAssessments] = useState<Assessment[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    const fetchAssessments = async () => {
      try {
        const response = await api.get(
          `/result_system/courses/${courseId}/results/${resultId}/assessments/`
        );
        setAssessments(response.data.results); // or response.data if not paginated
      } catch {
        setError("Failed to load assessments.");
      } finally {
        setLoading(false);
      }
    };
    fetchAssessments();
  }, [courseId, resultId]);

  const handleInputChange = (
    id: number,
    field: keyof Assessment,
    value: string
  ) => {
    setAssessments((prev) =>
      prev.map((a) =>
        a.id === id ? { ...a, [field]: value === "" ? null : Number(value) } : a
      )
    );
  };

  const handleSave = async () => {
    setSaving(true);
    try {
      await Promise.all(
        assessments.map((a) =>
          api.patch(
            `/result_system/courses/${courseId}/results/${resultId}/assessments/${a.id}/`,
            {
              ca_slot1: a.ca_slot1,
              ca_slot2: a.ca_slot2,
              ca_slot3: a.ca_slot3,
              ca_slot4: a.ca_slot4,
              exam_mark: a.exam_mark,
            }
          )
        )
      );
      alert("Assessments saved!");
    } catch {
      alert("Failed to save assessments.");
    } finally {
      setSaving(false);
    }
  };

  if (loading) return <CircularProgress />;
  if (error) return <Typography color="error">{error}</Typography>;

  return (
    <Box sx={{ maxWidth: 900, mx: "auto", mt: 4 }}>
      <Typography variant="h5" gutterBottom>
        Assessments for Result #{resultId}
      </Typography>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>Student ID</TableCell>
            <TableCell>CA Slot 1</TableCell>
            <TableCell>CA Slot 2</TableCell>
            <TableCell>CA Slot 3</TableCell>
            <TableCell>CA Slot 4</TableCell>
            <TableCell>Exam Mark</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {assessments.map((a) => (
            <TableRow key={a.id}>
              <TableCell>{a.student}</TableCell>
              <TableCell>
                <TextField
                  type="number"
                  value={a.ca_slot1 ?? ""}
                  onChange={(e) =>
                    handleInputChange(a.id, "ca_slot1", e.target.value)
                  }
                  size="small"
                  slotProps={{ input: { inputProps: { min: 0 } } }}
                />
              </TableCell>
              <TableCell>
                <TextField
                  type="number"
                  value={a.ca_slot2 ?? ""}
                  onChange={(e) =>
                    handleInputChange(a.id, "ca_slot2", e.target.value)
                  }
                  size="small"
                  slotProps={{ input: { inputProps: { min: 0 } } }}
                />
              </TableCell>
              <TableCell>
                <TextField
                  type="number"
                  value={a.ca_slot3 ?? ""}
                  onChange={(e) =>
                    handleInputChange(a.id, "ca_slot3", e.target.value)
                  }
                  size="small"
                  slotProps={{ input: { inputProps: { min: 0 } } }}
                />
              </TableCell>
              <TableCell>
                <TextField
                  type="number"
                  value={a.ca_slot4 ?? ""}
                  onChange={(e) =>
                    handleInputChange(a.id, "ca_slot4", e.target.value)
                  }
                  size="small"
                  slotProps={{ input: { inputProps: { min: 0 } } }}
                />
              </TableCell>
              <TableCell>
                <TextField
                  type="number"
                  value={a.exam_mark ?? ""}
                  onChange={(e) =>
                    handleInputChange(a.id, "exam_mark", e.target.value)
                  }
                  size="small"
                  slotProps={{ input: { inputProps: { min: 0 } } }}
                />
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
      <Button
        variant="contained"
        sx={{ mt: 2 }}
        onClick={handleSave}
        disabled={saving}
      >
        {saving ? "Saving..." : "Save"}
      </Button>
      <Button
        variant="contained"
        color="success"
        sx={{ mt: 2, ml: 2 }}
        onClick={async () => {
          try {
            await api.post(
              `/result_system/courses/${courseId}/results/${resultId}/submit/`,
              {}
            );
            alert("Result submitted successfully!");
          } catch {
            alert("Failed to submit result.");
          }
        }}
      >
        Submit Result
      </Button>
    </Box>
  );
};

export default ResultDetailPage;

import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import api from "../services/api";
import {
  Box,
  Typography,
  CircularProgress,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Paper,
} from "@mui/material";

interface Score {
  id: number;
  student_id: number;
  ca_slot1: number | null;
  ca_slot2: number | null;
  ca_slot3: number | null;
  ca_slot4: number | null;
  exam_mark: number | null;
}

const SubmittedResultScoresPage: React.FC = () => {
  const { resultId } = useParams<{ resultId: string }>();
  const [scores, setScores] = useState<Score[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchScores = async () => {
      try {
        const response = await api.get(
          `/result_system/submitted_results/${resultId}/scores/`
        );
        setScores(response.data.results);
      } catch {
        setError("Failed to load scores.");
      } finally {
        setLoading(false);
      }
    };
    fetchScores();
  }, [resultId]);

  if (loading) return <CircularProgress />;
  if (error) return <Typography color="error">{error}</Typography>;

  return (
    <Box sx={{ maxWidth: 900, mx: "auto", mt: 4 }}>
      <Typography variant="h5" gutterBottom>
        Scores for Submitted Result #{resultId}
      </Typography>
      <Paper>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Student ID</TableCell>
              <TableCell>CA Slot 1</TableCell>
              <TableCell>CA Slot 2</TableCell>
              <TableCell>CA Slot 3</TableCell>
              <TableCell>CA Slot 4</TableCell>
              <TableCell>Exam Mark</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {scores.map((score) => (
              <TableRow key={score.id}>
                <TableCell>{score.student_id}</TableCell>
                <TableCell>{score.ca_slot1}</TableCell>
                <TableCell>{score.ca_slot2}</TableCell>
                <TableCell>{score.ca_slot3}</TableCell>
                <TableCell>{score.ca_slot4}</TableCell>
                <TableCell>{score.exam_mark}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </Paper>
    </Box>
  );
};

export default SubmittedResultScoresPage;

import React, { useEffect, useState } from "react";
import api from "../services/api";
import { Box, Typography, CircularProgress, List, ListItemButton, ListItemText, Paper } from "@mui/material";
import { useNavigate } from "react-router-dom";

interface SubmittedResult {
  id: number;
  course_id: number;
  submitted_at: string;
  result_status: string;
  lecturer_id: number;
}

const SubmittedResultsPage: React.FC = () => {
  const [results, setResults] = useState<SubmittedResult[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const fetchResults = async () => {
      try {
        const response = await api.get("/result_system/submitted_results/");
        setResults(response.data.results);
      } catch {
        setError("Failed to load submitted results.");
      } finally {
        setLoading(false);
      }
    };
    fetchResults();
  }, []);

  if (loading) return <CircularProgress />;
  if (error) return <Typography color="error">{error}</Typography>;

  return (
    <Box sx={{ maxWidth: 600, mx: "auto", mt: 4 }}>
      <Typography variant="h5" gutterBottom>
        Submitted Results
      </Typography>
      <Paper>
        <List>
          {results.map((result) => (
            <ListItemButton
              key={result.id}
              onClick={() => navigate(`/result_system/submitted_results/${result.id}/scores`)}
            >
              <ListItemText
                primary={`Result ID: ${result.id}`}
                secondary={`Status: ${result.result_status} | Submitted at: ${result.submitted_at}`}
              />
            </ListItemButton>
          ))}
        </List>
      </Paper>
    </Box>
  );
};

export default SubmittedResultsPage;

routes 

import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../contexts/useAuth';

const ProtectedRoute: React.FC = () => {
  const { user } = useAuth();

  // If not authenticated, redirect to login
  if (!user) {
    return <Navigate to="/login" replace />;
  }

  // If authenticated, render the child routes
  return <Outlet />;
};

export default ProtectedRoute;

services

import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:8001/', // Adjust if your backend runs elsewhere
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add a request interceptor to attach the JWT token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('access');
    if (token) {
      config.headers = config.headers || {};
      config.headers['Authorization'] = `JWT ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

export default api;

import React from "react";
import { Routes, Route } from "react-router-dom";
import NavBar from "./components/NavBar";
import LoginPage from "./pages/LoginPage";
import CoursesPage from "./components/CoursePage";
import CourseResultsPage from "./pages/CourseResultsPage";
import ResultDetailPage from "./pages/ResultDetailPage";
import SubmittedResultsPage from "./pages/SubmittedResultsPage";
import SubmittedResultScoresPage from "./pages/SubmittedResultScorePage";
import NotFoundPage from "./pages/NotFoundPage";
import ProtectedRoute from "./routes/ProtectedRoute";

function HomePage() {
  return <h2>Home Page</h2>;
}

// ...other imports...

const App: React.FC = () => (
  <>
    <NavBar />
    <Routes>
      <Route path="/login" element={<LoginPage />} />
      <Route element={<ProtectedRoute />}>
        <Route path="/" element={<HomePage />} />
        <Route path="result_system/courses" element={<CoursesPage />} />
        <Route
          path="result_system/courses/:courseId"
          element={<CourseResultsPage />}
        />
        <Route
          path="result_system/courses/:courseId/results/:resultId"
          element={<ResultDetailPage />}
        />
        <Route
          path="result_system/submitted_results"
          element={<SubmittedResultsPage />}
        />
        <Route
          path="result_system/submitted_results/:resultId/scores"
          element={<SubmittedResultScoresPage />}
        />
        {/* Add more protected routes here */}
      </Route>
      <Route path="*" element={<NotFoundPage />} />
    </Routes>
  </>
);

export default App;

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import { AuthProvider } from './contexts/AuthProvider';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);
